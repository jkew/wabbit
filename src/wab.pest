WHITESPACE = _{ (" " | NEWLINE | "\t" ) }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
line_comment = _{ SOI ~ "//" ~ (!NEWLINE ~ ANY)+ }

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

char = { ASCII_ALPHANUMERIC }
reserved = {
    "var" | "if" | "while" | "float"
}

name = @{!reserved ~ ASCII_ALPHA ~ ASCII_ALPHANUMERIC*}


param = { name }

add = { "+" }
sub = { "-" }
div = { "/" }
mul = { "*" }
lt =  { "<" }
lte = { "<=" }
gt = { ">" }
gte = { ">=" }
eq = { "==" }
semi = { ";" }
expon = { "^" }
lparen = { "(" }
rparen = { ")" }
var = { "var" }
float_param = { "float" }
float_ret = { "float" }
func_call = { name ~ lparen ~ operand ~ rparen }

operand = { ( func_call | number | name ) }
operand_lhs = { operand }
operand_rhs = { operand }
mathbin2 = { (add | sub ) }
mathbin1 = { (mul | div ) }
mathbin_all = { add | sub | div | mul }
mathbin_exp1 = { operand_lhs ~ mathbin1 ~ operand_rhs }
mathbin_exp2 = { operand_lhs ~ mathbin2 ~ operand_rhs }
mathbin_exp0 = { lparen ~ (mathbin_exp1 | mathbin_exp2) ~ rparen }
math_expression_all = { ( mathbin_exp0 | mathbin_exp1 | mathbin_exp2 | operand ) }
math_expression_rhs = { math_expression_all }
math_expression_lhs = { math_expression_all }
math_expression_bin = { math_expression_lhs ~ mathbin_all ~ math_expression_rhs }
math_expression = { ( math_expression_all | math_expression_bin ) }


cmpbinop = { ( lt | lte | gt | gte | eq ) }
cmp_expression = { operand_lhs ~ cmpbinop ~ operand_rhs }

decl_assign_stmt = { "var " ~ name ~ "=" ~ math_expression ~ semi}
mathassign_stmt = { name ~ "=" ~ math_expression ~ semi }
return_stmt = { "return " ~ math_expression ~ semi }
print_stmt = { "print " ~  math_expression ~ semi }
ifelse = { "if " ~ cmp_expression ~ "{" ~ true_block ~ "}" ~ "else" ~ "{" ~ false_block ~ "}" }
while_stmt = { "while " ~ cmp_expression ~ "{" ~ statements ~ "}" }
func_stmt = { "func " ~ name ~ lparen ~ param ~ float_param? ~ rparen ~ float_ret? ~ "{" ~ statements ~ "}" }

if_stmt = { ifelse }
true_block = {statements}
false_block = {statements} 
statements = { (WHITESPACE | line_comment | mathassign_stmt | decl_assign_stmt | return_stmt | print_stmt | if_stmt | while_stmt | func_stmt | func_call | semi )+ }
